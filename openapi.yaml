openapi: 3.1.0
info:
  title: TimInTech GitOps API
  version: 1.0.0
  description: APIs für Audit-Plan, CI/Security/Release-Pläne und Compliance-Reports (read-first, apply optional).
servers:
  - url: https://api.timintech.dev/gitops/v1
  - url: http://localhost:8090/gitops/v1
security:
  - ApiKeyAuth: []
tags:
  - name: health
    description: Service-Status
  - name: audit
  - name: ci
  - name: security
  - name: release
  - name: policy
  - name: clean-reset
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
  schemas:
    PlanRequest:
      type: object
      required: [owner, repo]
      properties:
        owner: { type: string }
        repo: { type: string }
        apply: { type: boolean, default: false }
    PlanResponse:
      type: object
      properties:
        summary: { type: string }
        steps: { type: array, items: { type: string } }
        artifacts: { type: array, items: { type: string } }
    ErrorResponse:
      type: object
      properties:
        error: { type: string }
        detail: { type: string }
paths:
  /health:
    get:
      tags: [health]
      operationId: getHealth
      summary: Healthcheck
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string }
                  version: { type: string }

  /audit/plan:
    post:
      tags: [audit]
      operationId: postAuditPlan
      summary: Repo-Audit planen oder anwenden
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/PlanRequest' } }
      responses:
        '200':
          description: OK
          content:
            application/json: { schema: { $ref: '#/components/schemas/PlanResponse' } }
        '400': { description: Bad Request, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' }}}}
        '500': { description: Server Error, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' }}}}

  /ci/baseline:
    post:
      tags: [ci]
      operationId: postCiBaseline
      summary: CI-Basis (Lint/Matrix/Cache) planen oder anwenden
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/PlanRequest' } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PlanResponse' }}}}
        '400': { description: Bad Request, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' }}}}
        '500': { description: Server Error, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' }}}}

  /security/enable:
    post:
      tags: [security]
      operationId: postSecurityEnable
      summary: CodeQL, Secret-Scanning, SBOM/CVE-Scan planen oder anwenden
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/PlanRequest' } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PlanResponse' }}}}
        '400': { description: Bad Request, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' }}}}
        '500': { description: Server Error, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' }}}}

  /release/draft:
    post:
      tags: [release]
      operationId: postReleaseDraft
      summary: Release-Drafter/Tags/Changelog planen oder anwenden
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/PlanRequest' } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PlanResponse' }}}}
        '400': { description: Bad Request, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' }}}}
        '500': { description: Server Error, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' }}}}

  /policy/report:
    post:
      tags: [policy]
      operationId: postPolicyReport
      summary: Compliance-Report erzeugen
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/PlanRequest' } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PlanResponse' }}}}
        '400': { description: Bad Request, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' }}}}
        '500': { description: Server Error, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' }}}}

  /clean-reset/plan:
    post:
      tags: [clean-reset]
      operationId: postCleanResetPlan
      summary: Verlustarmen Clean-Reset nur planen (nie direkt anwenden)
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/PlanRequest' } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PlanResponse' }}}}
        '400': { description: Bad Request, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' }}}}
        '500': { description: Server Error, content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' }}}}
